apply plugin: 'com.android.library'
/*
 *  UVCCamera
 *  library and sample to access to UVC web camera on non-rooted Android device
 *
 * Copyright (c) 2014-2017 saki t_saki@serenegiant.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *  All files in the folder are under this Apache License, Version 2.0.
 *  Files in the libjpeg-turbo, libusb, libuvc, rapidjson folder
 *  may have a different license, see the respective files.
 */

import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

    defaultConfig {
        minSdkVersion 14
		targetSdkVersion versionTarget
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

//	externalNativeBuild {
//		ndkBuild {
//			path 'src/main/jni/Android.mk'
//		}
//	}

	sourceSets {
		main {
			jniLibs.srcDir 'src/main/libs'
			jni.srcDirs = []
		}
	}
}

<<<<<<< HEAD
//tasks.withType(JavaCompile) {
//	compileTask -> compileTask.dependsOn ndkBuild
//}
//
//task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
//	println('executing ndkBuild')
////	def ndkBuildingDir = project.plugins.findPlugin('com.android.library').sdkHandler.getNdkFolder().absolutePath
//	def ndkBuildingDir = android.sdkDirectory.absolutePath + "/ndk-bundle"
//	def ndkBuildPath = ndkBuildingDir
//	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
//	} else {
//		ndkBuildPath = ndkBuildingDir + '/ndk-build'
//	}
//	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
//}
=======
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkBuildingDir = properties.getProperty("ndk.dir")
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}
>>>>>>> 444f1070abedefaf3d01e88ba937bf424ce776a7

dependencies {
    compile fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')
	compile "com.android.support:support-annotations:${supportLibVersion}"
	compile project(":libcommon")
//	compile("com.serenegiant:common:${commonLibVersion}") {
//		exclude module: 'support-v4'
//	}
}
